# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com

service: hp-emag

# app and org for use with dashboard.serverless.com
app: hp-emag
org: bachi312

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '3'

provider:
  name: aws
  runtime: python3.8
  logRetentionInDays: 1
  memorySize: 128
  timeout: 300

# you can overwrite defaults here
  #stage: dev
  region: eu-central-1

# you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "*"

# you can define service wide environment variables here
  environment:
    RURL_GH_FREE: redis://default:ZFiALOXPOF1DEeX2gSlUfMYtjbNdWQx0@redis-19026.c293.eu-central-1-1.ec2.cloud.redislabs.com:19026
    RURL_GO_FREE: redis://default:cxBmlkng2O32yWsd4uOK4eVxMDymBoZv@redis-11627.c250.eu-central-1-1.ec2.cloud.redislabs.com:11627
    RURL_GH_PAID: redis://default:zMqX6xXLU3ZMnmYb2n3KPw5jTe9Efvis@redis-15108.c269.eu-west-1-3.ec2.cloud.redislabs.com:15108
    RURL_GO_PAID: redis://default:pfShrX9Yz20WJKAonBSJoEt9TxPnGVV4@redis-18296.c78.eu-west-1-2.ec2.cloud.redislabs.com:18296


# you can add packaging information here
package:
  patterns:
    - '!./**'
    - hp_emag/**
    - launcher.py
    - scrapy.cfg
#    - '!exclude-me.py'
#    - '!exclude-me-dir/**'
#    - include-me.py
#    - include-me-dir/**

functions:
  lambdaScrape:
    handler: launcher.scrape

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
  Resources:
    EmagTimeseriesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: emag-timeseries
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: date
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: date
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 8
          WriteCapacityUnits: 8
    EmagProductsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: emag-products
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: name
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: name
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 8
          WriteCapacityUnits: 8
    EmagStartUrlsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: emag-start_urls
        AttributeDefinitions:
          - AttributeName: status
            AttributeType: S
        KeySchema:
          - AttributeName: status
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 2
          WriteCapacityUnits: 2

plugins:
  - serverless-python-requirements

custom:
  pythonRequirements:
    slim: true # Omits tests, __pycache__, *.pyc etc from dependencies
    fileName: requirements.txt
    dockerizePip: non-linux