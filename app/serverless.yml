# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: hp-emag

# app and org for use with dashboard.serverless.com
app: hp-emag
org: bachi312

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: "3"

provider:
  name: aws
  runtime: python3.9
  logRetentionInDays: 1
  memorySize: 128
  timeout: 300
  
  # you can overwrite defaults here
  #   stage: dev
  region: eu-central-1

  # you can add statements to the Lambda function's IAM Role here
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            # DynamoDB Basic Access
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:BatchWriteItem
              # AWSLambdaDynamoDBExecutionRole
            - dynamodb:DescribeStream
            - dynamodb:GetRecords
            - dynamodb:GetShardIterator
            - dynamodb:ListStreams
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
          Resource: "arn:aws:dynamodb:${aws:region}:${aws:accountId}:*"

  # you can define service wide environment variables here
  environment:
    SCRAPEAPI_KEY: ${env:SCRAPEAPI_KEY}

# you can add packaging information here
package:
  patterns:
    - "!./**"
    - hp_emag/**
    - launcher_products.py
    - launcher_sitemap.py
    - launcher_test.py
    - scrapy.cfg
    - useragents.txt

functions:
  lambdaScrapeProducts:
    handler: launcher_products.scrape
    dependsOn:
      - EmagStartUrlsTable
    events:
      - stream:
          type: dynamodb
          arn: !GetAtt EmagStartUrlsTable.StreamArn
          batchSize: 1
          startingPosition: LATEST
          maximumRetryAttempts: 6
          enabled: true
  lambdaScrapeFailed:
    handler: launcher_failed_products.scrape
    dependsOn:
      - EmagStartUrlsTable
    events:
      - stream:
          type: dynamodb
          arn: !GetAtt EmagStartUrlsTable.StreamArn
          batchSize: 1
          startingPosition: LATEST
          maximumRetryAttempts: 6
          enabled: true
          filterPatterns:
            - eventName: [INSERT]
              dynamodb:
                NewImage:
                  status:
                    N: [511]
  lambdaScrapeSitemap:
    handler: launcher_sitemap.scrape
    events:
      - schedule:
          rate: cron(11 15 * * ? *)
          enabled: true
  lambdaScrapeTest:
    handler: launcher_test.scrape

# you can add CloudFormation resource templates here
resources:
  Resources:
    EmagTimeseriesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: emag-timeseries
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: crawled
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: crawled
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 8
          WriteCapacityUnits: 8
    EmagProductsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: emag-products
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: name
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: name
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 8
          WriteCapacityUnits: 8
    EmagStartUrlsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: emag-start_urls
        AttributeDefinitions:
          - AttributeName: status_code
            AttributeType: "N"
        KeySchema:
          - AttributeName: status_code
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 4
          WriteCapacityUnits: 4
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES

plugins:
  - serverless-python-requirements
  
custom:
  pythonRequirements:
    slim: true # Omits tests, __pycache__, *.pyc etc from dependencies
    fileName: requirements.txt
    dockerizePip: non-linux
